//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//

/// ResourceQuota sets aggregate quota restrictions enforced per namespace
@ModuleInfo { minPklVersion = "0.25.0" }
open module k8s.api.core.v1.ResourceQuota

extends ".../K8sResource.pkl"

import ".../apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"

fixed apiVersion: "v1"

fixed kind: "ResourceQuota"

/// Standard object's metadata.
///
/// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>
metadata: ObjectMeta?

/// Spec defines the desired quota.
///
/// <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>
spec: ResourceQuotaSpec?

/// Status defines the actual enforced quota and its current usage.
///
/// <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>
status: ResourceQuotaStatus?

/// ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
class ResourceQuotaSpec {
  /// scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values.
  ///
  /// For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
  scopeSelector: ScopeSelector?

  /// hard is the set of desired hard limits for each named resource.
  ///
  /// More info: <https://kubernetes.io/docs/concepts/policy/resource-quotas/>
  hard: Mapping<String, Quantity>?

  /// A collection of filters that must match each object tracked by a quota.
  ///
  /// If not specified, the quota matches all objects.
  scopes: Listing<String>?
}

/// A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.
class ScopeSelector {
  /// A list of scope selector requirements by scope of the resources.
  matchExpressions: Listing<ScopedResourceSelectorRequirement>?
}

/// A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.
class ScopedResourceSelectorRequirement {
  /// The name of the scope that the selector applies to.
  scopeName: "BestEffort"|"CrossNamespacePodAffinity"|"NotBestEffort"|"NotTerminating"|"PriorityClass"|"Terminating"

  /// An array of string values.
  ///
  /// If the operator is In or NotIn, the values array must be non-empty.
  /// If the operator is Exists or DoesNotExist, the values array must be empty.
  /// This array is replaced during a strategic merge patch.
  values: Listing<String>?

  /// Represents a scope's relationship to a set of values.
  ///
  /// Valid operators are In, NotIn, Exists, DoesNotExist.
  operator: "In"|"NotIn"|"Exists"|"DoesNotExist"
}

/// ResourceQuotaStatus defines the enforced hard limits and observed use.
class ResourceQuotaStatus {
  /// Hard is the set of enforced hard limits for each named resource.
  ///
  /// More info: <https://kubernetes.io/docs/concepts/policy/resource-quotas/>
  hard: Mapping<String, Quantity>?

  /// Used is the current observed total usage of the resource in the namespace.
  used: Mapping<String, Quantity>?
}


//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//

/// Endpoints is a collection of endpoints that implement the actual service.
///
/// Example:
/// 
/// 	 Name: "mysvc",
/// 	 Subsets: [
/// 	   {
/// 	     Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
/// 	     Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
/// 	   },
/// 	   {
/// 	     Addresses: [{"ip": "10.10.3.3"}],
/// 	     Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
/// 	   },
/// 	]
@ModuleInfo { minPklVersion = "0.25.0" }
open module k8s.api.core.v1.Endpoints

extends ".../K8sResource.pkl"

import ".../apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"
import ".../api/core/v1/ObjectReference.pkl"

fixed apiVersion: "v1"

fixed kind: "Endpoints"

/// Standard object's metadata.
///
/// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>
metadata: ObjectMeta?

/// The set of all endpoints is the union of all subsets.
///
/// Addresses are placed into subsets according to the IPs they share.
/// A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports.
/// No address will appear in both Addresses and NotReadyAddresses in the same subset.
/// Sets of addresses and ports that comprise a service.
subsets: Listing<EndpointSubset>?

/// EndpointSubset is a group of addresses with a common set of ports.
///
/// The expanded set of endpoints is the Cartesian product of Addresses x Ports.
/// For example, given:
/// 
/// 	{
/// 	  Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
/// 	  Ports:     [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
/// 	}
/// 
/// The resulting set of endpoints can be viewed as:
/// 
/// 	a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],
/// 	b: [ 10.10.1.1:309, 10.10.2.2:309 ]
class EndpointSubset {
  /// IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.
  notReadyAddresses: Listing<EndpointAddress>?

  /// IP addresses which offer the related ports that are marked as ready.
  ///
  /// These endpoints should be considered safe for load balancers and clients to utilize.
  addresses: Listing<EndpointAddress>?

  /// Port numbers available on the related IP addresses.
  ports: Listing<EndpointPort>(module.hasUniquePortNames(this), module.hasNonNullPortNames(this))?
}

/// EndpointAddress is a tuple that describes single IP address.
class EndpointAddress {
  /// Optional: Node hosting this endpoint.
  ///
  /// This can be used to determine endpoints local to a node.
  nodeName: String?

  /// Reference to object providing the endpoint.
  targetRef: ObjectReference?

  /// The Hostname of this endpoint
  hostname: String?

  /// The IP of this endpoint.
  ///
  /// May not be loopback (127.0.0.0/8 or ::1), link-local (169.254.0.0/16 or fe80::/10), or link-local multicast (224.0.0.0/24 or ff02::/16).
  ip: String
}

/// EndpointPort is a tuple that describes a single port.
class EndpointPort {
  /// The IP protocol for this port.
  ///
  /// Must be UDP, TCP, or SCTP.
  /// Default is TCP.
  protocol: ("UDP"|"TCP"|"SCTP")?

  /// The port number of the endpoint.
  port: PortNumber

  /// The application protocol for this port.
  ///
  /// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
  /// This field follows standard Kubernetes label syntax.
  /// Valid values are either:
  /// 
  /// * Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and <https://www.iana.org/assignments/service-names).>
  /// 
  /// * Kubernetes-defined prefixed names:
  /// * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in <https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior->
  /// * 'kubernetes.io/ws'  - WebSocket over cleartext as described in <https://www.rfc-editor.org/rfc/rfc6455>
  /// * 'kubernetes.io/wss' - WebSocket over TLS as described in <https://www.rfc-editor.org/rfc/rfc6455>
  /// 
  /// * Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.
  appProtocol: String?

  /// The name of this port.
  ///
  /// This must match the 'name' field in the corresponding ServicePort.
  /// Must be a DNS_LABEL.
  /// Optional only if one port is defined.
  name: Rfc1035Label?
}


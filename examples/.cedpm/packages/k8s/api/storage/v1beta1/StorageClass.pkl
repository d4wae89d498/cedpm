//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//

/// StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.
///
/// 
/// StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.
@K8sVersion { removedIn = "1.22" }
@ModuleInfo { minPklVersion = "0.25.0" }
open module k8s.api.storage.v1beta1.StorageClass

extends ".../K8sResource.pkl"

import ".../apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"
import ".../api/core/v1/TopologySelectorTerm.pkl"

fixed apiVersion: "storage.k8s.io/v1beta1"

fixed kind: "StorageClass"

/// VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.
///
/// When unset, VolumeBindingImmediate is used.
/// This field is only honored by servers that enable the VolumeScheduling feature.
volumeBindingMode: String?

/// Standard object's metadata.
///
/// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>
metadata: ObjectMeta?

/// Provisioner indicates the type of the provisioner.
provisioner: String

/// AllowVolumeExpansion shows whether the storage class allow volume expand
allowVolumeExpansion: Boolean?

/// Dynamically provisioned PersistentVolumes of this storage class are created with this reclaimPolicy.
///
/// Defaults to Delete.
reclaimPolicy: String?

/// Dynamically provisioned PersistentVolumes of this storage class are created with these mountOptions, e.g. ["ro", "soft"].
///
/// Not validated - mount of the PVs will simply fail if one is invalid.
mountOptions: Listing<String>?

/// Parameters holds the parameters for the provisioner that should create volumes of this storage class.
parameters: Mapping<String, String>?

/// Restrict the node topologies where volumes can be dynamically provisioned.
///
/// Each volume plugin defines its own supported topology specifications.
/// An empty TopologySelectorTerm list means there is no topology restriction.
/// This field is only honored by servers that enable the VolumeScheduling feature.
allowedTopologies: Listing<TopologySelectorTerm>?


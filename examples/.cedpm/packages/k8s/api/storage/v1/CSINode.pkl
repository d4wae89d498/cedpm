//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//

/// CSINode holds information about all CSI drivers installed on a node.
///
/// CSI drivers do not need to create the CSINode object directly.
/// As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration.
/// CSINode has the same name as a node.
/// If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn't create this object.
/// CSINode has an OwnerReference that points to the corresponding node object.
@ModuleInfo { minPklVersion = "0.25.0" }
open module k8s.api.storage.v1.CSINode

extends ".../K8sResource.pkl"

import ".../apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"

fixed apiVersion: "storage.k8s.io/v1"

fixed kind: "CSINode"

/// Standard object's metadata.
///
/// metadata.name must be the Kubernetes node name.
metadata: ObjectMeta?

/// spec is the specification of CSINode
spec: CSINodeSpec

/// CSINodeSpec holds information about the specification of all CSI drivers installed on a node
class CSINodeSpec {
  /// drivers is a list of information of all CSI Drivers existing on a node.
  ///
  /// If all drivers in the list are uninstalled, this can become empty.
  drivers: Listing<CSINodeDriver>
}

/// CSINodeDriver holds information about the specification of one CSI driver installed on a node
class CSINodeDriver {
  /// allocatable represents the volume resources of a node that are available for scheduling.
  ///
  /// This field is beta.
  allocatable: VolumeNodeResources?

  /// name represents the name of the CSI driver that this object refers to.
  ///
  /// This MUST be the same name returned by the CSI GetPluginName() call for that driver.
  name: String

  /// topologyKeys is the list of keys supported by the driver.
  ///
  /// When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. "company.com/zone", "company.com/region").
  /// When a driver is initialized on a node, it provides the same topology keys along with values.
  /// Kubelet will expose these topology keys as labels on its own node object.
  /// When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver.
  /// It is possible for different nodes to use different topology keys.
  /// This can be empty if driver does not support topology.
  topologyKeys: Listing<String>?

  /// nodeID of the node from the driver point of view.
  ///
  /// This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes.
  /// For example, Kubernetes may refer to a given node as "node1", but the storage system may refer to the same node as "nodeA".
  /// When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. "nodeA" instead of "node1".
  /// This field is required.
  nodeID: String
}

/// VolumeNodeResources is a set of resource limits for scheduling of volumes.
class VolumeNodeResources {
  /// count indicates the maximum number of unique volumes managed by the CSI driver that can be used on a node.
  ///
  /// A volume that is both attached and mounted on a node is considered to be used once, not twice.
  /// The same rule applies for a unique volume that is shared among multiple pods on the same node.
  /// If this field is not specified, then the supported number of volumes on this node is unbounded.
  count: Int32?
}


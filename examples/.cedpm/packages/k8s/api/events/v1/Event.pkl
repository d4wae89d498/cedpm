//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//

/// Event is a report of an event somewhere in the cluster.
///
/// It generally denotes some state change in the system.
/// Events have a limited retention time and triggers and messages may evolve with time.
/// Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.
/// Events should be treated as informative, best-effort, supplemental data.
@ModuleInfo { minPklVersion = "0.25.0" }
open module k8s.api.events.v1.Event

extends ".../K8sResource.pkl"

import ".../apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"
import ".../api/core/v1/EventSource.pkl"
import ".../api/core/v1/ObjectReference.pkl"

fixed apiVersion: "events.k8s.io/v1"

fixed kind: "Event"

/// note is a human-readable description of the status of this operation.
///
/// Maximal length of the note is 1kB, but libraries should be prepared to handle values up to 64kB.
note: String?

/// reason is why the action was taken.
///
/// It is human-readable.
/// This field cannot be empty for new Events and it can have at most 128 characters.
reason: String?

/// Standard object's metadata.
///
/// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>
metadata: ObjectMeta?

/// reportingInstance is the ID of the controller instance, e.g. `kubelet-xyzf`.
///
/// This field cannot be empty for new Events and it can have at most 128 characters.
reportingInstance: String?

/// deprecatedCount is the deprecated field assuring backward compatibility with core.v1 Event type.
@Deprecated
deprecatedCount: Int32?

/// deprecatedSource is the deprecated field assuring backward compatibility with core.v1 Event type.
@Deprecated
deprecatedSource: EventSource?

/// type is the type of this event (Normal, Warning), new types could be added in the future.
///
/// It is machine-readable.
/// This field cannot be empty for new Events.
type: String?

/// deprecatedLastTimestamp is the deprecated field assuring backward compatibility with core.v1 Event type.
@Deprecated
deprecatedLastTimestamp: Time?

/// regarding contains the object this Event is about.
///
/// In most cases it's an Object reporting controller implements, e.g. ReplicaSetController implements ReplicaSets and this event is emitted because it acts on some changes in a ReplicaSet object.
regarding: ObjectReference?

/// deprecatedFirstTimestamp is the deprecated field assuring backward compatibility with core.v1 Event type.
@Deprecated
deprecatedFirstTimestamp: Time?

/// reportingController is the name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
///
/// This field cannot be empty for new Events.
reportingController: String?

/// related is the optional secondary object for more complex actions.
///
/// E.g.
/// when regarding object triggers a creation or deletion of related object.
related: ObjectReference?

/// series is data about the Event series this event represents or nil if it's a singleton Event.
series: EventSeries?

/// eventTime is the time when this Event was first observed.
///
/// It is required.
eventTime: MicroTime

/// action is what action was taken/failed regarding to the regarding object.
///
/// It is machine-readable.
/// This field cannot be empty for new Events and it can have at most 128 characters.
action: String?

/// EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
///
/// How often to update the EventSeries is up to the event reporters.
/// The default event reporter in "k8s.io/client-go/tools/events/event_broadcaster.go" shows how this struct is updated on heartbeats and can guide customized reporter implementations.
class EventSeries {
  /// count is the number of occurrences in this series up to the last heartbeat time.
  count: Int32

  /// lastObservedTime is the time when last Event from the series was seen before last heartbeat.
  lastObservedTime: MicroTime
}


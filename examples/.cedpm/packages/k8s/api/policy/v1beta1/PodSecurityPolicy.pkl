//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//

/// PodSecurityPolicy governs the ability to make requests that affect the Security Context that will be applied to a pod and container.
///
/// Deprecated in 1.21.
@Deprecated
@K8sVersion { removedIn = "1.25" }
@ModuleInfo { minPklVersion = "0.25.0" }
open module k8s.api.policy.v1beta1.PodSecurityPolicy

extends ".../K8sResource.pkl"

import ".../apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"
import ".../api/core/v1/SELinuxOptions.pkl"

fixed apiVersion: "policy/v1beta1"

fixed kind: "PodSecurityPolicy"

/// Standard object's metadata.
///
/// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>
metadata: ObjectMeta?

/// spec defines the policy enforced.
spec: PodSecurityPolicySpec?

/// PodSecurityPolicySpec defines the policy enforced.
class PodSecurityPolicySpec {
  /// defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.
  ///
  /// You may not list a capability in both defaultAddCapabilities and requiredDropCapabilities.
  /// Capabilities added here are implicitly allowed, and need not be included in the allowedCapabilities list.
  defaultAddCapabilities: Listing<String>?

  /// hostPorts determines which host port ranges are allowed to be exposed.
  hostPorts: Listing<HostPortRange>?

  /// AllowedProcMountTypes is an allowlist of allowed ProcMountTypes.
  ///
  /// Empty or nil indicates that only the DefaultProcMountType may be used.
  /// This requires the ProcMountType feature flag to be enabled.
  allowedProcMountTypes: Listing<String>?

  /// fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.
  fsGroup: FSGroupStrategyOptions

  /// seLinux is the strategy that will dictate the allowable labels that may be set.
  seLinux: SELinuxStrategyOptions

  /// hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
  hostNetwork: Boolean?

  /// hostIPC determines if the policy allows the use of HostIPC in the pod spec.
  hostIPC: Boolean?

  /// volumes is an allowlist of volume plugins.
  ///
  /// Empty indicates that no volumes may be used.
  /// To allow all volumes you may use '*'.
  volumes: Listing<String>?

  /// requiredDropCapabilities are the capabilities that will be dropped from the container.
  ///
  /// These are required to be dropped and cannot be added.
  requiredDropCapabilities: Listing<String>?

  /// RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set.
  ///
  /// If this field is omitted, the pod's RunAsGroup can take any value.
  /// This field requires the RunAsGroup feature gate to be enabled.
  runAsGroup: RunAsGroupStrategyOptions?

  /// allowedCapabilities is a list of capabilities that can be requested to add to the container.
  ///
  /// Capabilities in this field may be added at the pod author's discretion.
  /// You must not list a capability in both allowedCapabilities and requiredDropCapabilities.
  allowedCapabilities: Listing<String>?

  /// readOnlyRootFilesystem when set to true will force containers to run with a read only root file system.
  ///
  /// If the container specifically requests to run with a non-read only root file system the PSP should deny the pod.
  /// If set to false the container may run with a read only root file system if it wishes but it will not be forced to.
  readOnlyRootFilesystem: Boolean?

  /// privileged determines if a pod can request to be run as privileged.
  privileged: Boolean?

  /// runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
  runAsUser: RunAsUserStrategyOptions

  /// runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod.
  ///
  /// If this field is omitted, the pod's runtimeClassName field is unrestricted.
  /// Enforcement of this field depends on the RuntimeClass feature gate being enabled.
  runtimeClass: RuntimeClassStrategyOptions?

  /// allowedHostPaths is an allowlist of host paths.
  ///
  /// Empty indicates that all host paths may be used.
  allowedHostPaths: Listing<AllowedHostPath>?

  /// forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none.
  ///
  /// Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of forbidden sysctls.
  /// Single * means all sysctls are forbidden.
  /// 
  /// Examples: e.g. "foo/*" forbids "foo/bar", "foo/baz", etc.
  /// e.g. "foo.*" forbids "foo.bar", "foo.baz", etc.
  forbiddenSysctls: Listing<String>?

  /// AllowedCSIDrivers is an allowlist of inline CSI drivers that must be explicitly set to be embedded within a pod spec.
  ///
  /// An empty value indicates that any CSI driver can be used for inline ephemeral volumes.
  /// This is a beta field, and is only honored if the API server enables the CSIInlineVolume feature gate.
  allowedCSIDrivers: Listing<AllowedCSIDriver>?

  /// supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
  supplementalGroups: SupplementalGroupsStrategyOptions

  /// defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.
  defaultAllowPrivilegeEscalation: Boolean?

  /// allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none.
  ///
  /// Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls.
  /// Single * means all unsafe sysctls are allowed.
  /// Kubelet has to allowlist all allowed unsafe sysctls explicitly to avoid rejection.
  /// 
  /// Examples: e.g. "foo/*" allows "foo/bar", "foo/baz", etc.
  /// e.g. "foo.*" allows "foo.bar", "foo.baz", etc.
  allowedUnsafeSysctls: Listing<String>?

  /// allowPrivilegeEscalation determines if a pod can request to allow privilege escalation.
  ///
  /// If unspecified, defaults to true.
  allowPrivilegeEscalation: Boolean?

  /// allowedFlexVolumes is an allowlist of Flexvolumes.
  ///
  /// Empty or nil indicates that all Flexvolumes may be used.
  /// This parameter is effective only when the usage of the Flexvolumes is allowed in the "volumes" field.
  allowedFlexVolumes: Listing<AllowedFlexVolume>?

  /// hostPID determines if the policy allows the use of HostPID in the pod spec.
  hostPID: Boolean?
}

/// HostPortRange defines a range of host ports that will be enabled by a policy for pods to use.
///
/// It requires both the start and end to be defined.
class HostPortRange {
  /// min is the start of the range, inclusive.
  min: Int32

  /// max is the end of the range, inclusive.
  max: Int32
}

/// FSGroupStrategyOptions defines the strategy type and options used to create the strategy.
class FSGroupStrategyOptions {
  /// ranges are the allowed ranges of fs groups.
  ///
  /// If you would like to force a single fs group then supply a single range with the same start and end.
  /// Required for MustRunAs.
  ranges: Listing<IDRange>?

  /// rule is the strategy that will dictate what FSGroup is used in the SecurityContext.
  rule: String?
}

/// IDRange provides a min/max of an allowed range of IDs.
class IDRange {
  /// min is the start of the range, inclusive.
  min: Int

  /// max is the end of the range, inclusive.
  max: Int
}

/// SELinuxStrategyOptions defines the strategy type and any options used to create the strategy.
class SELinuxStrategyOptions {
  /// seLinuxOptions required to run as; required for MustRunAs More info: <https://kubernetes.io/docs/tasks/configure-pod-container/security-context/>
  seLinuxOptions: SELinuxOptions?

  /// rule is the strategy that will dictate the allowable labels that may be set.
  rule: String
}

/// RunAsGroupStrategyOptions defines the strategy type and any options used to create the strategy.
class RunAsGroupStrategyOptions {
  /// ranges are the allowed ranges of gids that may be used.
  ///
  /// If you would like to force a single gid then supply a single range with the same start and end.
  /// Required for MustRunAs.
  ranges: Listing<IDRange>?

  /// rule is the strategy that will dictate the allowable RunAsGroup values that may be set.
  rule: String
}

/// RunAsUserStrategyOptions defines the strategy type and any options used to create the strategy.
class RunAsUserStrategyOptions {
  /// ranges are the allowed ranges of uids that may be used.
  ///
  /// If you would like to force a single uid then supply a single range with the same start and end.
  /// Required for MustRunAs.
  ranges: Listing<IDRange>?

  /// rule is the strategy that will dictate the allowable RunAsUser values that may be set.
  rule: String
}

/// RuntimeClassStrategyOptions define the strategy that will dictate the allowable RuntimeClasses for a pod.
class RuntimeClassStrategyOptions {
  /// allowedRuntimeClassNames is an allowlist of RuntimeClass names that may be specified on a pod.
  ///
  /// A value of "*" means that any RuntimeClass name is allowed, and must be the only item in the list.
  /// An empty list requires the RuntimeClassName field to be unset.
  allowedRuntimeClassNames: Listing<String>

  /// defaultRuntimeClassName is the default RuntimeClassName to set on the pod.
  ///
  /// The default MUST be allowed by the allowedRuntimeClassNames list.
  /// A value of nil does not mutate the Pod.
  defaultRuntimeClassName: String?
}

/// AllowedHostPath defines the host volume conditions that will be enabled by a policy for pods to use.
///
/// It requires the path prefix to be defined.
class AllowedHostPath {
  /// when set to true, will allow host volumes matching the pathPrefix only if all volume mounts are readOnly.
  readOnly: Boolean?

  /// pathPrefix is the path prefix that the host volume must match.
  ///
  /// It does not support `*`.
  /// Trailing slashes are trimmed when validating the path prefix with a host path.
  /// 
  /// Examples: `/foo` would allow `/foo`, `/foo/` and `/foo/bar` `/foo` would not allow `/food` or `/etc/foo`
  pathPrefix: String?
}

/// AllowedCSIDriver represents a single inline CSI Driver that is allowed to be used.
class AllowedCSIDriver {
  /// Name is the registered name of the CSI driver
  name: String
}

/// SupplementalGroupsStrategyOptions defines the strategy type and options used to create the strategy.
class SupplementalGroupsStrategyOptions {
  /// ranges are the allowed ranges of supplemental groups.
  ///
  /// If you would like to force a single supplemental group then supply a single range with the same start and end.
  /// Required for MustRunAs.
  ranges: Listing<IDRange>?

  /// rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.
  rule: String?
}

/// AllowedFlexVolume represents a single Flexvolume that is allowed to be used.
class AllowedFlexVolume {
  /// driver is the name of the Flexvolume driver.
  driver: String
}


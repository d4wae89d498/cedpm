//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//

/// PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods
@K8sVersion { removedIn = "1.25" }
@ModuleInfo { minPklVersion = "0.25.0" }
open module k8s.api.policy.v1beta1.PodDisruptionBudget

extends ".../K8sResource.pkl"

import ".../apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"
import ".../apimachinery/pkg/apis/meta/v1/LabelSelector.pkl"
import ".../apimachinery/pkg/apis/meta/v1/Condition.pkl"

fixed apiVersion: "policy/v1beta1"

fixed kind: "PodDisruptionBudget"

/// Standard object's metadata.
///
/// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>
metadata: ObjectMeta?

/// Specification of the desired behavior of the PodDisruptionBudget.
spec: PodDisruptionBudgetSpec?

/// Most recently observed status of the PodDisruptionBudget.
status: PodDisruptionBudgetStatus?

/// PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
class PodDisruptionBudgetSpec {
  /// An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.
  ///
  /// So for example you can prevent all voluntary evictions by specifying "100%".
  minAvailable: (Int|String)?

  /// An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod.
  ///
  /// For example, one can prevent all voluntary evictions by specifying 0.
  /// This is a mutually exclusive setting with "minAvailable".
  maxUnavailable: (Int|String)?

  /// Label query over pods whose evictions are managed by the disruption budget.
  ///
  /// A null selector selects no pods.
  /// An empty selector ({}) also selects no pods, which differs from standard behavior of selecting all pods.
  /// In policy/v1, an empty selector will select all pods in the namespace.
  selector: LabelSelector?
}

/// PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget.
///
/// Status may trail the actual state of a system.
class PodDisruptionBudgetStatus {
  /// current number of healthy pods
  currentHealthy: Int32

  /// total number of pods counted by this disruption budget
  expectedPods: Int32

  /// Number of pod disruptions that are currently allowed.
  disruptionsAllowed: Int32

  /// DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller.
  ///
  /// A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout).
  /// The key in the map is the name of the pod and the value is the time when the API server processed the eviction request.
  /// If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time.
  /// If everything goes smooth this map should be empty for the most of the time.
  /// Large number of entries in the map may indicate problems with pod deletions.
  disruptedPods: Mapping<String, Time>?

  /// Conditions contain conditions for PDB.
  ///
  /// The disruption controller sets the DisruptionAllowed condition.
  /// The following are known values for the reason field (additional reasons could be added in the future): - SyncFailed: The controller encountered an error and wasn't able to compute
  ///               the number of allowed disruptions.
  /// Therefore no disruptions are
  ///               allowed and the status of the condition will be False.
  /// - InsufficientPods: The number of pods are either at or below the number
  ///                     required by the PodDisruptionBudget.
  /// No disruptions are
  ///                     allowed and the status of the condition will be False.
  /// - SufficientPods: There are more pods than required by the PodDisruptionBudget.
  ///                   The condition will be True, and the number of allowed
  ///                   disruptions are provided by the disruptionsAllowed property.
  @K8sVersion { introducedIn = "1.21" }
  conditions: Listing<Condition>?

  /// Most recent generation observed when updating this PDB status.
  ///
  /// DisruptionsAllowed and other status information is valid only if observedGeneration equals to PDB's object generation.
  observedGeneration: Int?

  /// minimum desired number of healthy pods
  desiredHealthy: Int32
}


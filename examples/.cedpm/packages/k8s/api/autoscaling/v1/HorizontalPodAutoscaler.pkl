//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//

/// configuration of a horizontal pod autoscaler.
@ModuleInfo { minPklVersion = "0.25.0" }
open module k8s.api.autoscaling.v1.HorizontalPodAutoscaler

extends ".../K8sResource.pkl"

import ".../apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"

fixed apiVersion: "autoscaling/v1"

fixed kind: "HorizontalPodAutoscaler"

/// Standard object metadata.
///
/// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>
metadata: ObjectMeta?

/// spec defines the behaviour of autoscaler.
///
/// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.>
spec: HorizontalPodAutoscalerSpec?

/// status is the current information about the autoscaler.
status: HorizontalPodAutoscalerStatus?

/// specification of a horizontal pod autoscaler.
class HorizontalPodAutoscalerSpec {
  /// maxReplicas is the upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
  maxReplicas: Int32

  /// minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.
  ///
  /// It defaults to 1 pod.
  /// minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.
  /// Scaling is active as long as at least one metric value is available.
  minReplicas: Int32?

  /// targetCPUUtilizationPercentage is the target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
  targetCPUUtilizationPercentage: Int32?

  /// reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
  scaleTargetRef: CrossVersionObjectReference
}

/// CrossVersionObjectReference contains enough information to let you identify the referred resource.
class CrossVersionObjectReference {
  /// apiVersion is the API version of the referent
  apiVersion: String?

  /// kind is the kind of the referent; More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>
  kind: String

  /// name is the name of the referent; More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
  name: String
}

/// current status of a horizontal pod autoscaler
class HorizontalPodAutoscalerStatus {
  /// currentCPUUtilizationPercentage is the current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.
  currentCPUUtilizationPercentage: Int32?

  /// desiredReplicas is the  desired number of replicas of pods managed by this autoscaler.
  desiredReplicas: Int32

  /// currentReplicas is the current number of replicas of pods managed by this autoscaler.
  currentReplicas: Int32

  /// lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.
  lastScaleTime: Time?

  /// observedGeneration is the most recent generation observed by this autoscaler.
  observedGeneration: Int?
}


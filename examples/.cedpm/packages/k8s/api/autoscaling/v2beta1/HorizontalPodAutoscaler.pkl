//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//

/// HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.
@K8sVersion { removedIn = "1.25" }
@ModuleInfo { minPklVersion = "0.25.0" }
open module k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler

extends ".../K8sResource.pkl"

import ".../apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"
import ".../apimachinery/pkg/apis/meta/v1/LabelSelector.pkl"

fixed apiVersion: "autoscaling/v2beta1"

fixed kind: "HorizontalPodAutoscaler"

/// metadata is the standard object metadata.
///
/// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>
metadata: ObjectMeta?

/// spec is the specification for the behaviour of the autoscaler.
///
/// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.>
spec: HorizontalPodAutoscalerSpec?

/// status is the current information about the autoscaler.
status: HorizontalPodAutoscalerStatus?

/// HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.
class HorizontalPodAutoscalerSpec {
  /// maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up.
  ///
  /// It cannot be less that minReplicas.
  maxReplicas: Int32

  /// minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.
  ///
  /// It defaults to 1 pod.
  /// minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.
  /// Scaling is active as long as at least one metric value is available.
  minReplicas: Int32?

  /// metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).
  ///
  /// The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.
  /// Ergo, metrics used must decrease as the pod count is increased, and vice-versa.
  /// See the individual metric source types for more information about how each type of metric must respond.
  metrics: Listing<MetricSpec>?

  /// scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics should be collected, as well as to actually change the replica count.
  scaleTargetRef: CrossVersionObjectReference
}

/// MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).
class MetricSpec {
  /// external refers to a global metric that is not associated with any Kubernetes object.
  ///
  /// It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
  `external`: ExternalMetricSource?

  /// resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory).
  ///
  /// Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
  resource: ResourceMetricSource?

  /// container resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing a single container in each pod of the current scale target (e.g. CPU or memory).
  ///
  /// Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
  /// This is an alpha feature and can be enabled by the HPAContainerMetrics feature flag.
  @K8sVersion { introducedIn = "1.20" }
  containerResource: ContainerResourceMetricSource?

  /// pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).
  ///
  /// The values will be averaged together before being compared to the target value.
  pods: PodsMetricSource?

  /// type is the type of metric source.
  ///
  /// It should be one of "ContainerResource", "External", "Object", "Pods" or "Resource", each mapping to a matching field in the object.
  /// Note: "ContainerResource" type is available on when the feature-gate HPAContainerMetrics is enabled
  type: "ContainerResource"|"External"|"Object"|"Pods"|"Resource"

  /// object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).
  object: ObjectMetricSource?
}

/// ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
///
/// Exactly one "target" type should be set.
class ExternalMetricSource {
  /// metricSelector is used to identify a specific time series within a given metric.
  metricSelector: LabelSelector?

  /// metricName is the name of the metric in question.
  metricName: String

  /// targetAverageValue is the target per-pod value of global metric (as a quantity).
  ///
  /// Mutually exclusive with TargetValue.
  targetAverageValue: Quantity?

  /// targetValue is the target value of the metric (as a quantity).
  ///
  /// Mutually exclusive with TargetAverageValue.
  targetValue: Quantity?
}

/// ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).
///
/// The values will be averaged together before being compared to the target.
/// Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
/// Only one "target" type should be set.
class ResourceMetricSource {
  /// targetAverageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.
  targetAverageUtilization: Int32?

  /// targetAverageValue is the target value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the "pods" metric source type.
  targetAverageValue: Quantity?

  /// name is the name of the resource in question.
  name: String
}

/// ContainerResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).
///
/// The values will be averaged together before being compared to the target.
/// Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
/// Only one "target" type should be set.
class ContainerResourceMetricSource {
  /// container is the name of the container in the pods of the scaling target
  container: String

  /// targetAverageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.
  targetAverageUtilization: Int32?

  /// targetAverageValue is the target value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the "pods" metric source type.
  targetAverageValue: Quantity?

  /// name is the name of the resource in question.
  name: String
}

/// PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second).
///
/// The values will be averaged together before being compared to the target value.
class PodsMetricSource {
  /// metricName is the name of the metric in question
  metricName: String

  /// targetAverageValue is the target value of the average of the metric across all relevant pods (as a quantity)
  targetAverageValue: Quantity

  /// selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping When unset, just the metricName will be used to gather metrics.
  selector: LabelSelector?
}

/// ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
class ObjectMetricSource {
  /// averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
  averageValue: Quantity?

  /// metricName is the name of the metric in question.
  metricName: String

  /// targetValue is the target value of the metric (as a quantity).
  targetValue: Quantity

  /// selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping When unset, just the metricName will be used to gather metrics.
  selector: LabelSelector?

  /// target is the described Kubernetes object.
  target: CrossVersionObjectReference
}

/// CrossVersionObjectReference contains enough information to let you identify the referred resource.
class CrossVersionObjectReference {
  /// API version of the referent
  apiVersion: String?

  /// Kind of the referent; More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds">
  kind: String

  /// Name of the referent; More info: <http://kubernetes.io/docs/user-guide/identifiers#names>
  name: String
}

/// HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.
class HorizontalPodAutoscalerStatus {
  /// desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler.
  desiredReplicas: Int32

  /// currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler.
  currentReplicas: Int32

  /// conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met.
  conditions: Listing<HorizontalPodAutoscalerCondition>?

  /// lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods, used by the autoscaler to control how often the number of pods is changed.
  lastScaleTime: Time?

  /// observedGeneration is the most recent generation observed by this autoscaler.
  observedGeneration: Int?

  /// currentMetrics is the last read state of the metrics used by this autoscaler.
  currentMetrics: Listing<MetricStatus>?
}

/// HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.
class HorizontalPodAutoscalerCondition {
  /// reason is the reason for the condition's last transition.
  reason: String?

  /// lastTransitionTime is the last time the condition transitioned from one status to another
  lastTransitionTime: Time?

  /// message is a human-readable explanation containing details about the transition
  message: String?

  /// type describes the current condition
  type: String

  /// status is the status of the condition (True, False, Unknown)
  status: String
}

/// MetricStatus describes the last-read state of a single metric.
class MetricStatus {
  /// external refers to a global metric that is not associated with any Kubernetes object.
  ///
  /// It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
  `external`: ExternalMetricStatus?

  /// resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory).
  ///
  /// Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
  resource: ResourceMetricStatus?

  /// container resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing a single container in each pod in the current scale target (e.g. CPU or memory).
  ///
  /// Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
  @K8sVersion { introducedIn = "1.20" }
  containerResource: ContainerResourceMetricStatus?

  /// pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).
  ///
  /// The values will be averaged together before being compared to the target value.
  pods: PodsMetricStatus?

  /// type is the type of metric source.
  ///
  /// It will be one of "ContainerResource", "External", "Object", "Pods" or "Resource", each corresponds to a matching field in the object.
  /// Note: "ContainerResource" type is available on when the feature-gate HPAContainerMetrics is enabled
  type: "ContainerResource"|"External"|"Object"|"Pods"|"Resource"

  /// object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).
  object: ObjectMetricStatus?
}

/// ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object.
class ExternalMetricStatus {
  /// metricSelector is used to identify a specific time series within a given metric.
  metricSelector: LabelSelector?

  /// metricName is the name of a metric used for autoscaling in metric system.
  metricName: String

  /// currentAverageValue is the current value of metric averaged over autoscaled pods.
  currentAverageValue: Quantity?

  /// currentValue is the current value of the metric (as a quantity)
  currentValue: Quantity
}

/// ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).
///
/// Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
class ResourceMetricStatus {
  /// currentAverageValue is the current value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the "pods" metric source type.
  ///
  /// It will always be set, regardless of the corresponding metric specification.
  currentAverageValue: Quantity

  /// name is the name of the resource in question.
  name: String

  /// currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.
  ///
  /// It will only be present if `targetAverageValue` was set in the corresponding metric specification.
  currentAverageUtilization: Int32?
}

/// ContainerResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing a single container in each pod in the current scale target (e.g. CPU or memory).
///
/// Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
class ContainerResourceMetricStatus {
  /// container is the name of the container in the pods of the scaling target
  container: String

  /// currentAverageValue is the current value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the "pods" metric source type.
  ///
  /// It will always be set, regardless of the corresponding metric specification.
  currentAverageValue: Quantity

  /// name is the name of the resource in question.
  name: String

  /// currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.
  ///
  /// It will only be present if `targetAverageValue` was set in the corresponding metric specification.
  currentAverageUtilization: Int32?
}

/// PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).
class PodsMetricStatus {
  /// metricName is the name of the metric in question
  metricName: String

  /// currentAverageValue is the current value of the average of the metric across all relevant pods (as a quantity)
  currentAverageValue: Quantity

  /// selector is the string-encoded form of a standard kubernetes label selector for the given metric When set in the PodsMetricSource, it is passed as an additional parameter to the metrics server for more specific metrics scoping.
  ///
  /// When unset, just the metricName will be used to gather metrics.
  selector: LabelSelector?
}

/// ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
class ObjectMetricStatus {
  /// averageValue is the current value of the average of the metric across all relevant pods (as a quantity)
  averageValue: Quantity?

  /// metricName is the name of the metric in question.
  metricName: String

  /// selector is the string-encoded form of a standard kubernetes label selector for the given metric When set in the ObjectMetricSource, it is passed as an additional parameter to the metrics server for more specific metrics scoping.
  ///
  /// When unset, just the metricName will be used to gather metrics.
  selector: LabelSelector?

  /// currentValue is the current value of the metric (as a quantity).
  currentValue: Quantity

  /// target is the described Kubernetes object.
  target: CrossVersionObjectReference
}


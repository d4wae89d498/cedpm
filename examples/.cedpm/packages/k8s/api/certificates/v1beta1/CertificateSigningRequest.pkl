//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//

/// Describes a certificate signing request
@K8sVersion { removedIn = "1.22" }
@ModuleInfo { minPklVersion = "0.25.0" }
open module k8s.api.certificates.v1beta1.CertificateSigningRequest

extends ".../K8sResource.pkl"

import ".../apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"

fixed apiVersion: "certificates.k8s.io/v1beta1"

fixed kind: "CertificateSigningRequest"

metadata: ObjectMeta?

/// The certificate request itself and any additional information.
spec: CertificateSigningRequestSpec?

/// Derived information about the request.
status: CertificateSigningRequestStatus?

/// This information is immutable after the request is created.
///
/// Only the Request and Usages fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users.
class CertificateSigningRequestSpec {
  /// Base64-encoded PKCS#10 CSR data
  request: String

  /// UID information about the requesting user.
  ///
  /// See user.Info interface for details.
  uid: String?

  /// Extra information about the requesting user.
  ///
  /// See user.Info interface for details.
  extra: Mapping<String, Listing<String>>?

  /// Group information about the requesting user.
  ///
  /// See user.Info interface for details.
  groups: Listing<String>?

  /// allowedUsages specifies a set of usage contexts the key will be valid for.
  ///
  /// See: <https://tools.ietf.org/html/rfc5280#section-4.2.1.3>
  ///      <https://tools.ietf.org/html/rfc5280#section-4.2.1.12>
  /// Valid values are:
  ///  "signing",
  ///  "digital signature",
  ///  "content commitment",
  ///  "key encipherment",
  ///  "key agreement",
  ///  "data encipherment",
  ///  "cert sign",
  ///  "crl sign",
  ///  "encipher only",
  ///  "decipher only",
  ///  "any",
  ///  "server auth",
  ///  "client auth",
  ///  "code signing",
  ///  "email protection",
  ///  "s/mime",
  ///  "ipsec end system",
  ///  "ipsec tunnel",
  ///  "ipsec user",
  ///  "timestamping",
  ///  "ocsp signing",
  ///  "microsoft sgc",
  ///  "netscape sgc"
  usages: "signing"|"digital signature"|"content commitment"|"key encipherment"|"key agreement"|"data encipherment"|"cert sign"|"crl sign"|"encipher only"|"decipher only"|"any"|"server auth"|"client auth"|"code signing"|"email protection"|"s/mime"|"ipsec end system"|"ipsec tunnel"|"ipsec user"|"timestamping"|"ocsp signing"|"microsoft sgc"|"netscape sgc"

  /// Requested signer for the request.
  ///
  /// It is a qualified name in the form: `scope-hostname.io/name`.
  /// If empty, it will be defaulted:
  ///  1.
  /// If it's a kubelet client certificate, it is assigned
  ///     "kubernetes.io/kube-apiserver-client-kubelet".
  ///  2.
  /// If it's a kubelet serving certificate, it is assigned
  ///     "kubernetes.io/kubelet-serving".
  ///  3.
  /// Otherwise, it is assigned "kubernetes.io/legacy-unknown".
  /// Distribution of trust for signers happens out of band.
  /// You can select on this field using `spec.signerName`.
  signerName: String?

  /// Information about the requesting user.
  ///
  /// See user.Info interface for details.
  username: String?
}

class CertificateSigningRequestStatus {
  /// If request was approved, the controller will place the issued certificate here.
  certificate: String?

  /// Conditions applied to the request, such as approval or denial.
  conditions: Listing<CertificateSigningRequestCondition>?
}

class CertificateSigningRequestCondition {
  /// brief reason for the request state
  reason: String?

  /// lastTransitionTime is the time the condition last transitioned from one status to another.
  ///
  /// If unset, when a new condition type is added or an existing condition's status is changed, the server defaults this to the current time.
  lastTransitionTime: Time?

  /// human readable message with details about the request state
  message: String?

  /// type of the condition.
  ///
  /// Known conditions include "Approved", "Denied", and "Failed".
  type: "Approved"|"Denied"|"Failed"|String

  /// timestamp for the last update to this condition
  lastUpdateTime: Time?

  /// Status of the condition, one of True, False, Unknown.
  ///
  /// Approved, Denied, and Failed conditions may not be "False" or "Unknown".
  /// Defaults to "True".
  /// If unset, should be treated as "True".
  status: "True"|"False"|"Unknown"
}


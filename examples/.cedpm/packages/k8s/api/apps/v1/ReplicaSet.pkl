//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//

/// ReplicaSet ensures that a specified number of pod replicas are running at any given time.
@ModuleInfo { minPklVersion = "0.25.0" }
open module k8s.api.apps.v1.ReplicaSet

extends ".../K8sResource.pkl"

import ".../apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"
import ".../api/core/v1/PodTemplateSpec.pkl"
import ".../apimachinery/pkg/apis/meta/v1/LabelSelector.pkl"

fixed apiVersion: "apps/v1"

fixed kind: "ReplicaSet"

/// If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages.
///
/// Standard object's metadata.
/// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>
metadata: ObjectMeta?

/// Spec defines the specification of the desired behavior of the ReplicaSet.
///
/// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>
spec: ReplicaSetSpec?

/// Status is the most recently observed status of the ReplicaSet.
///
/// This data may be out of date by some window of time.
/// Populated by the system.
/// Read-only.
/// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>
status: ReplicaSetStatus?

/// ReplicaSetSpec is the specification of a ReplicaSet.
class ReplicaSetSpec {
  /// Template is the object that describes the pod that will be created if insufficient replicas are detected.
  ///
  /// More info: <https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template>
  template: PodTemplateSpec?

  /// Replicas is the number of desired replicas.
  ///
  /// This is a pointer to distinguish between explicit zero and unspecified.
  /// Defaults to 1.
  /// More info: <https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller>
  replicas: Int32?

  /// Selector is a label query over pods that should match the replica count.
  ///
  /// Label keys and values that must match in order to be controlled by this replica set.
  /// It must match the pod template's labels.
  /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors>
  selector: LabelSelector

  /// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available.
  ///
  /// Defaults to 0 (pod will be considered available as soon as it is ready)
  minReadySeconds: Int32?
}

/// ReplicaSetStatus represents the current status of a ReplicaSet.
class ReplicaSetStatus {
  /// The number of pods that have labels matching the labels of the pod template of the replicaset.
  fullyLabeledReplicas: Int32?

  /// Replicas is the most recently observed number of replicas.
  ///
  /// More info: <https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller>
  replicas: Int32

  /// readyReplicas is the number of pods targeted by this ReplicaSet with a Ready Condition.
  readyReplicas: Int32?

  /// Represents the latest available observations of a replica set's current state.
  conditions: Listing<ReplicaSetCondition>?

  /// The number of available replicas (ready for at least minReadySeconds) for this replica set.
  availableReplicas: Int32?

  /// ObservedGeneration reflects the generation of the most recently observed ReplicaSet.
  observedGeneration: Int?
}

/// ReplicaSetCondition describes the state of a replica set at a certain point.
class ReplicaSetCondition {
  /// The reason for the condition's last transition.
  reason: String?

  /// The last time the condition transitioned from one status to another.
  lastTransitionTime: Time?

  /// A human readable message indicating details about the transition.
  message: String?

  /// Type of replica set condition.
  type: String

  /// Status of the condition, one of True, False, Unknown.
  status: "True"|"False"|"Unknown"
}


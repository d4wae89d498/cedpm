//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//

/// RuntimeClass defines a class of container runtime supported in the cluster.
///
/// The RuntimeClass is used to determine which container runtime is used to run all containers in a pod.
/// RuntimeClasses are (currently) manually defined by a user or cluster provisioner, and referenced in the PodSpec.
/// The Kubelet is responsible for resolving the RuntimeClassName reference before running the pod.
/// For more details, see <https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class>
@K8sVersion { removedIn = "1.25" }
@ModuleInfo { minPklVersion = "0.25.0" }
open module k8s.api.node.v1beta1.RuntimeClass

extends ".../K8sResource.pkl"

import ".../apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"
import ".../api/core/v1/Toleration.pkl"

fixed apiVersion: "node.k8s.io/v1beta1"

fixed kind: "RuntimeClass"

/// Handler specifies the underlying runtime and configuration that the CRI implementation will use to handle pods of this class.
///
/// The possible values are specific to the node & CRI configuration.
/// It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node.
/// For example, a handler called "runc" might specify that the runc OCI runtime (using native Linux containers) will be used to run the containers in a pod.
/// The Handler must be lowercase, conform to the DNS Label (RFC 1123) requirements, and is immutable.
handler: Rfc1123Label

/// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>
metadata: ObjectMeta?

/// Overhead represents the resource overhead associated with running a pod for a given RuntimeClass.
///
/// For more details, see <https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md>
overhead: Overhead?

/// Scheduling holds the scheduling constraints to ensure that pods running with this RuntimeClass are scheduled to nodes that support it.
///
/// If scheduling is nil, this RuntimeClass is assumed to be supported by all nodes.
scheduling: Scheduling?

/// Overhead structure represents the resource overhead associated with running a pod.
class Overhead {
  /// PodFixed represents the fixed resource overhead associated with running a pod.
  podFixed: Mapping<String, Quantity>?
}

/// Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass.
class Scheduling {
  /// tolerations are appended (excluding duplicates) to pods running with this RuntimeClass during admission, effectively unioning the set of nodes tolerated by the pod and the RuntimeClass.
  tolerations: Listing<Toleration>?

  /// nodeSelector lists labels that must be present on nodes that support this RuntimeClass.
  ///
  /// Pods using this RuntimeClass can only be scheduled to a node matched by this selector.
  /// The RuntimeClass nodeSelector is merged with a pod's existing nodeSelector.
  /// Any conflicts will cause the pod to be rejected in admission.
  nodeSelector: Mapping<String, String>?
}


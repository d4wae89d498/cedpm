//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//

/// ResourceClaim describes which resources are needed by a resource consumer.
///
/// Its status tracks whether the resource has been allocated and what the resulting attributes are.
/// 
/// This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
@K8sVersion { introducedIn = "1.26"; removedIn = "1.27" }
@ModuleInfo { minPklVersion = "0.25.0" }
open module k8s.api.resource.v1alpha1.ResourceClaim

extends ".../K8sResource.pkl"

import ".../apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"
import ".../api/resource/v1alpha1/ResourceClaimSpec.pkl"
import ".../api/core/v1/NodeSelector.pkl"

fixed apiVersion: "resource.k8s.io/v1alpha1"

fixed kind: "ResourceClaim"

/// Standard object metadata
metadata: ObjectMeta?

/// Spec describes the desired attributes of a resource that then needs to be allocated.
///
/// It can only be set once when creating the ResourceClaim.
spec: ResourceClaimSpec

/// Status describes whether the resource is available and with which attributes.
status: ResourceClaimStatus?

/// ResourceClaimStatus tracks whether the resource has been allocated and what the resulting attributes are.
class ResourceClaimStatus {
  /// Allocation is set by the resource driver once a resource has been allocated successfully.
  ///
  /// If this is not specified, the resource is not yet allocated.
  allocation: AllocationResult?

  /// ReservedFor indicates which entities are currently allowed to use the claim.
  ///
  /// A Pod which references a ResourceClaim which is not reserved for that Pod will not be started.
  /// 
  /// There can be at most 32 such reservations.
  /// This may get increased in the future, but not reduced.
  reservedFor: Listing<ResourceClaimConsumerReference>?

  /// DriverName is a copy of the driver name from the ResourceClass at the time when allocation started.
  driverName: String?

  /// DeallocationRequested indicates that a ResourceClaim is to be deallocated.
  ///
  /// 
  /// The driver then must deallocate this claim and reset the field together with clearing the Allocation field.
  /// 
  /// While DeallocationRequested is set, no new consumers may be added to ReservedFor.
  deallocationRequested: Boolean?
}

/// AllocationResult contains attributed of an allocated resource.
class AllocationResult {
  /// Shareable determines whether the resource supports more than one consumer at a time.
  shareable: Boolean?

  /// ResourceHandle contains arbitrary data returned by the driver after a successful allocation.
  ///
  /// This is opaque for Kubernetes.
  /// Driver documentation may explain to users how to interpret this data if needed.
  /// 
  /// The maximum size of this field is 16KiB.
  /// This may get increased in the future, but not reduced.
  resourceHandle: String?

  /// This field will get set by the resource driver after it has allocated the resource driver to inform the scheduler where it can schedule Pods using the ResourceClaim.
  ///
  /// 
  /// Setting this field is optional.
  /// If null, the resource is available everywhere.
  availableOnNodes: NodeSelector?
}

/// ResourceClaimConsumerReference contains enough information to let you locate the consumer of a ResourceClaim.
///
/// The user must be a resource in the same namespace as the ResourceClaim.
class ResourceClaimConsumerReference {
  /// UID identifies exactly one incarnation of the resource.
  uid: String

  /// APIGroup is the group for the resource being referenced.
  ///
  /// It is empty for the core API.
  /// This matches the group in the APIVersion that is used when creating the resources.
  apiGroup: String?

  /// Resource is the type of resource being referenced, for example "pods".
  resource: String

  /// Name is the name of resource being referenced.
  name: String
}


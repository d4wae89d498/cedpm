//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//

/// IngressClass represents the class of the Ingress, referenced by the Ingress Spec.
///
/// The `ingressclass.kubernetes.io/is-default-class` annotation can be used to indicate that an IngressClass should be considered default.
/// When a single IngressClass resource has this annotation set to true, new Ingress resources without a class specified will be assigned this default class.
@K8sVersion { removedIn = "1.22" }
@ModuleInfo { minPklVersion = "0.25.0" }
open module k8s.api.networking.v1beta1.IngressClass

extends ".../K8sResource.pkl"

import ".../apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"

fixed apiVersion: "networking.k8s.io/v1beta1"

fixed kind: "IngressClass"

/// Standard object's metadata.
///
/// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>
metadata: ObjectMeta?

/// Spec is the desired state of the IngressClass.
///
/// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status>
spec: IngressClassSpec?

/// IngressClassSpec provides information about the class of an Ingress.
class IngressClassSpec {
  /// Controller refers to the name of the controller that should handle this class.
  ///
  /// This allows for different "flavors" that are controlled by the same controller.
  /// For example, you may have different Parameters for the same implementing controller.
  /// This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. "acme.io/ingress-controller".
  /// This field is immutable.
  controller: String?

  /// Parameters is a link to a custom resource containing additional configuration for the controller.
  ///
  /// This is optional if the controller does not require extra parameters.
  parameters: IngressClassParametersReference?
}

/// IngressClassParametersReference identifies an API object.
///
/// This can be used to specify a cluster or namespace-scoped resource.
class IngressClassParametersReference {
  /// APIGroup is the group for the resource being referenced.
  ///
  /// If APIGroup is not specified, the specified Kind must be in the core API group.
  /// For any other third-party types, APIGroup is required.
  apiGroup: String?

  /// Kind is the type of resource being referenced.
  kind: String

  /// Scope represents if this refers to a cluster or namespace scoped resource.
  ///
  /// This may be set to "Cluster" (default) or "Namespace".
  /// Field can be enabled with IngressClassNamespacedParams feature gate.
  scope: ("Cluster"|"Namespace")?

  /// Name is the name of resource being referenced.
  name: String

  /// Namespace is the namespace of the resource being referenced.
  ///
  /// This field is required when scope is set to "Namespace" and must be unset when scope is set to "Cluster".
  namespace: String?(module.onlyAllowedIf(this, scope == "Namespace"))
}


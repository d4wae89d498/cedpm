//===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//

/// EndpointSlice represents a subset of the endpoints that implement a service.
///
/// For a given service there may be multiple EndpointSlice objects, selected by labels, which must be joined to produce the full set of endpoints.
@K8sVersion { removedIn = "1.25" }
@ModuleInfo { minPklVersion = "0.25.0" }
open module k8s.api.discovery.v1beta1.EndpointSlice

extends ".../K8sResource.pkl"

import ".../api/core/v1/ObjectReference.pkl"
import ".../apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"

fixed apiVersion: "discovery.k8s.io/v1beta1"

fixed kind: "EndpointSlice"

/// endpoints is a list of unique endpoints in this slice.
///
/// Each slice may include a maximum of 1000 endpoints.
endpoints: Listing<Endpoint>(length <= 1000)

/// Standard object's metadata.
metadata: ObjectMeta?

/// addressType specifies the type of address carried by this EndpointSlice.
///
/// All addresses in this slice must be the same type.
/// This field is immutable after creation.
/// The following address types are currently supported:
/// * IPv4: Represents an IPv4 Address.
/// * IPv6: Represents an IPv6 Address.
/// * FQDN: Represents a Fully Qualified Domain Name.
addressType: String

/// ports specifies the list of network ports exposed by each endpoint in this slice.
///
/// Each port must have a unique name.
/// When ports is empty, it indicates that there are no defined ports.
/// When a port is defined with a nil port value, it indicates "all ports".
/// Each slice may include a maximum of 100 ports.
ports: Listing<EndpointPort>(length <= 100, module.hasUniquePortNames(this))?

/// Endpoint represents a single logical "backend" implementing a service.
class Endpoint {
  /// nodeName represents the name of the Node hosting this endpoint.
  ///
  /// This can be used to determine endpoints local to a Node.
  /// This field can be enabled with the EndpointSliceNodeName feature gate.
  @K8sVersion { introducedIn = "1.20" }
  nodeName: String?

  /// targetRef is a reference to a Kubernetes object that represents this endpoint.
  targetRef: ObjectReference?

  /// addresses of this endpoint.
  ///
  /// The contents of this field are interpreted according to the corresponding EndpointSlice addressType field.
  /// Consumers must handle different types of addresses in the context of their own capabilities.
  /// This must contain at least one address but no more than 100.
  /// These are all assumed to be fungible and clients may choose to only use the first element.
  /// Refer to: <https://issue.k8s.io/106267>
  addresses: Listing<String>(length.isBetween(1, 100))

  /// hostname of this endpoint.
  ///
  /// This field may be used by consumers of endpoints to distinguish endpoints from each other (e.g. in DNS names).
  /// Multiple endpoints which use the same hostname should be considered fungible (e.g. multiple A values in DNS).
  /// Must be lowercase and pass DNS Label (RFC 1123) validation.
  hostname: Rfc1123Label?

  /// hints contains information associated with how an endpoint should be consumed.
  @K8sVersion { introducedIn = "1.21" }
  hints: EndpointHints?

  /// topology contains arbitrary topology information associated with the endpoint.
  ///
  /// These key/value pairs must conform with the label format.
  /// <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels> Topology may include a maximum of 16 key/value pairs.
  /// This includes, but is not limited to the following well known keys:
  /// * kubernetes.io/hostname: the value indicates the hostname of the node
  ///   where the endpoint is located.
  /// This should match the corresponding
  ///   node label.
  /// * topology.kubernetes.io/zone: the value indicates the zone where the
  ///   endpoint is located.
  /// This should match the corresponding node label.
  /// * topology.kubernetes.io/region: the value indicates the region where the
  ///   endpoint is located.
  /// This should match the corresponding node label.
  /// This field is deprecated and will be removed in future api versions.
  @Deprecated
  topology: Mapping<"kubernetes.io/hostname"|"topology.kubernetes.io/zone"|"topology.kubernetes.io/region"|String, String>?

  /// conditions contains information about the current status of the endpoint.
  conditions: EndpointConditions?
}

/// EndpointHints provides hints describing how an endpoint should be consumed.
class EndpointHints {
  /// forZones indicates the zone(s) this endpoint should be consumed by to enable topology aware routing.
  ///
  /// May contain a maximum of 8 entries.
  forZones: Listing<ForZone>?
}

/// ForZone provides information about which zones should consume this endpoint.
class ForZone {
  /// name represents the name of the zone.
  name: String
}

/// EndpointConditions represents the current condition of an endpoint.
class EndpointConditions {
  /// ready indicates that this endpoint is prepared to receive traffic, according to whatever system is managing the endpoint.
  ///
  /// A nil value indicates an unknown state.
  /// In most cases consumers should interpret this unknown state as ready.
  /// For compatibility reasons, ready should never be "true" for terminating endpoints.
  ready: Boolean?

  /// terminating indicates that this endpoint is terminating.
  ///
  /// A nil value indicates an unknown state.
  /// Consumers should interpret this unknown state to mean that the endpoint is not terminating.
  /// This field can be enabled with the EndpointSliceTerminatingCondition feature gate.
  @K8sVersion { introducedIn = "1.20" }
  terminating: Boolean?

  /// serving is identical to ready except that it is set regardless of the terminating state of endpoints.
  ///
  /// This condition should be set to true for a ready endpoint that is terminating.
  /// If nil, consumers should defer to the ready condition.
  /// This field can be enabled with the EndpointSliceTerminatingCondition feature gate.
  @K8sVersion { introducedIn = "1.20" }
  serving: Boolean?
}

/// EndpointPort represents a Port used by an EndpointSlice
class EndpointPort {
  /// The IP protocol for this port.
  ///
  /// Must be UDP, TCP, or SCTP.
  /// Default is TCP.
  protocol: ("UDP"|"TCP"|"SCTP")?

  /// The port number of the endpoint.
  ///
  /// If this is not specified, ports are not restricted and must be interpreted in the context of the specific consumer.
  port: PortNumber?

  /// The application protocol for this port.
  ///
  /// This field follows standard Kubernetes label syntax.
  /// Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and <https://www.iana.org/assignments/service-names).>
  /// Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
  appProtocol: String?

  /// The name of this port.
  ///
  /// All ports in an EndpointSlice must have a unique name.
  /// If the EndpointSlice is dervied from a Kubernetes service, this corresponds to the Service.ports[].name.
  /// Name must either be an empty string or pass DNS_LABEL validation:
  /// * must be no more than 63 characters long.
  /// * must consist of lower case alphanumeric characters or '-'.
  /// * must start and end with an alphanumeric character.
  /// Default is empty string.
  name: PortName?
}


open module CppExecutable
extends "@build-system/Executable.pkl"

import "@build-system/Target.pkl" as Target
import "@utils/string.pkl" as StringUtil

hidden name: String;
local modName = name;
hidden type: "Executable" | "Library";
hidden debug: Boolean = false;
hidden compiler: String = read("env:CXX")
hidden standard: String = read("env:CXXSTANDARDS").split(" ").last;
hidden flags: String = read("env:CXXFLAGS")
hidden modules: Listing<String>
hidden libraries: Listing<String>
hidden sources: Listing<String>

hidden outputDir = "."
hidden compiledModulePath = (modulePath: String) ->
		modulePath + ".o"
hidden precompiledModulePath = (modulePath: String) ->
		modulePath + ".pcm"

// TODO: change this according compilers
hidden compile_prefix = compiler
		+ " "
		+ flags
		+ if (debug) " -g" else ""
		+ " -std=" + standard;
//	name = "hello"
//	type = "Executable"
targets {
		... modules.toList().map((file) ->
			new Target {
				dependencies { file }
				name = precompiledModulePath.apply(file)
				command = compile_prefix + " -fprebuilt-module-path=. --precompile " + file + " -o " + name
			}
		).toListing();

		... modules.toList().map((file) ->
			new Target {
				dependencies { precompiledModulePath.apply(file) }
				name = compiledModulePath.apply(file)
				command = compile_prefix + " -fprebuilt-module-path=. -c " + file + ".pcm -o " + file + ".o "
			}
		).toListing();

		when (type == "Executable")
		{
			new Target {
				dependencies {
					... modules.toList().map((file) -> compiledModulePath.apply(precompiledModulePath.apply(file))).toListing()
				}
				name = modName
				command = compile_prefix + " " + StringUtil.join(dependencies) + " -o " + name
			}
		}
	}

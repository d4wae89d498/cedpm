module CppExecutable
extends "@build-system/Executable.pkl"

import "@build-system/Target.pkl" as Target
import "@build-system/Instruction.pkl" as Instruction




debug: Boolean = false;
compiler: String = read("env:CXX")
standard: String = read("env:CXXSTANDARDS").split(" ").last;
flags: String = read("env:CXXFLAGS")
modules: Listing<String>
libraries: Listing<String>

function encodeChar(str: String): String =
	if (str == " ")
		" "
	else
		str

function encode_uri(str: String, idx: Number): String =
	if (idx == str.length - 1)
		encodeChar(str[idx])
	else
		encodeChar(str[idx]) + encode_uri(str, idx + 1);

local test = read(encode_uri("cli://ls -lha", 0))

function _catlst(lst: Listing<String>, idx: Number): String =
	if (idx > lst.length - 1)
		""
	else if (idx == lst.length - 1)
		lst[lst.length - 1]
	else
		lst[idx] + " " + _catlst(lst, idx + 1)

function catlst(lst: Listing) = _catlst(lst, 0)

function target(): Target = new {
	// TODO: change this according compilers
	local compile_prefix = compiler
		+ " "
		+ flags
		+ if (debug) " -g" else ""
		+ " -std=" + standard;
	name = "hello" + test.text
	type = "Executable"
	instructions {
		... modules.toList().map((file) ->
			new Instruction {
				inputs { file }
				output = file + ".pcm"
				command = compile_prefix + " --prebuilt-module-path=. --precompile " + file + " -o " + file + ".pcm "
			}
		).toListing();

		... modules.toList().map((file) ->
			new Instruction {
				inputs { file + ".pcm" }
				output = file + ".o"
				command = compile_prefix + " --prebuilt-module-path=. -c " + file + ".pcm -o " + file + ".o "
			}
		).toListing();

		new Instruction {
			inputs {
				... modules.toList().map((file) -> file + ".o").toListing()
			}
			output = name
			command = compile_prefix + " " + catlst(modules.toList().map((file) -> file + ".o").toListing()) + " -o " + name
		}
	}
}
